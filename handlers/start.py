import random
import string
import os
from captcha.image import ImageCaptcha
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters
)
from utils.db import load_users, save_users

# –î–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –∫–∞–ø—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
pending_captcha: dict[int, str] = {}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–ø—á–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))
    pending_captcha[user_id] = text

    img = ImageCaptcha(width=200, height=70)
    file_path = f"/tmp/captcha_{user_id}.png"
    img.write(text, file_path)

    with open(file_path, 'rb') as f:
        await update.message.reply_photo(f, caption="üõ° –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏:")
    os.remove(file_path)

async def verify(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    answer = update.message.text.strip().upper()

    expected = pending_captcha.get(user_id)
    if expected is None:
        return  # –∏–ª–∏ –º–æ–∂–Ω–æ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ–π—Ç–∏ /start

    if answer == expected:
        users = load_users()
        users.setdefault(str(user_id), {})["verified"] = True
        save_users(users)
        pending_captcha.pop(user_id, None)

        await update.message.reply_text(
            "‚úÖ –ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞!",
            reply_markup=ReplyKeyboardMarkup(
                [["üì∑ –ü–µ—Ä–µ–π—Ç–∏ –∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é"]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π –∫–∞–ø—á–∏."
        )

def register_handlers(app: ApplicationBuilder):
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, verify))

if __name__ == "__main__":
    app = ApplicationBuilder().token("YOUR_TOKEN_HERE").build()
    register_handlers(app)
    app.run_polling()
