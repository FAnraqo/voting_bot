from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, InputMediaPhoto, ReplyKeyboardMarkup, InputMediaPhoto
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler
from utils.db import load_photos, load_users, save_users, save_photos, load_votes, save_votes
import os

CATEGORIES = ['nature', 'engineers', 'sports', 'other']

def register_handlers(app):
    app.add_handler(CommandHandler("vote", choose_category))
    app.add_handler(CallbackQueryHandler(handle_category, pattern="^cat_"))
    app.add_handler(CallbackQueryHandler(handle_vote, pattern="^vote_"))

async def choose_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton(c.capitalize(), callback_data=f"cat_{c}")] for c in CATEGORIES]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    category = update.callback_query.data.split("_")[1]
    photos = load_photos()
    photo_list = [p for p in photos.values() if p["category"] == category]
    
    context.user_data["voting_category"] = category
    context.user_data["photo_ids"] = [p["id"] for p in photo_list]

    for p in photo_list:
        button = InlineKeyboardMarkup([[InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å", callback_data=f"vote_{p['id']}")]])
        await update.effective_chat.send_photo(p["file_id"], caption=f"–ê–í–¢–û–†: {p['author']}", reply_markup=button)

async def handle_vote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data  # —Ñ–æ—Ä–º–∞—Ç: vote_–ø—Ä–∏—Ä–æ–¥–∞_0
    try:
        _, category, photo_index = data.split("_")
        photo_index = int(photo_index)
    except Exception as e:
        await query.edit_message_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞.")
        return

    user_id = query.from_user.id
    votes = load_votes()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if category not in votes:
        votes[category] = {}

    if str(photo_index) not in votes[category]:
        votes[category][str(photo_index)] = {
            "votes": 0,
            "users": []
        }

    if user_id in votes[category][str(photo_index)]["users"]:
        await query.edit_message_text("–í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ —ç—Ç–æ —Ñ–æ—Ç–æ.")
        return

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å
    votes[category][str(photo_index)]["votes"] += 1
    votes[category][str(photo_index)]["users"].append(user_id)
    save_votes(votes)

    await query.edit_message_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à –≥–æ–ª–æ—Å –∑–∞—Å—á–∏—Ç–∞–Ω.")

async def enter_voting(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ú–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—Ä–æ—à—ë–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–ø—á—É
    # if not is_verified(user_id): return

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –æ—Ü–µ–Ω–∫–∏:",
        reply_markup=ReplyKeyboardMarkup(
            [["üåø –ü—Ä–∏—Ä–æ–¥–∞", "‚öôÔ∏è –ò–Ω–∂–µ–Ω–µ—Ä—ã"], ["üèÖ –°–ø–æ—Ä—Ç", "üìÅ –†–∞–∑–Ω–æ–µ"]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—É—Ç–µ–π –∫ —Ñ–æ—Ç–æ –∏–∑ –ø–∞–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def get_photos_by_category(category: str):
    folder = os.path.join("media", category)
    photos = []
    if os.path.exists(folder):
        for file in os.listdir(folder):
            if file.lower().endswith((".jpg", ".jpeg", ".png")):
                photos.append(os.path.join(folder, file))
    return photos

async def handle_category_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    category = update.message.text.strip()

    valid_categories = ["üåø –ü—Ä–∏—Ä–æ–¥–∞", "‚öôÔ∏è –ò–Ω–∂–µ–Ω–µ—Ä—ã", "üèÖ –°–ø–æ—Ä—Ç", "üìÅ –†–∞–∑–Ω–æ–µ"]
    if category not in valid_categories:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –∫–Ω–æ–ø–æ–∫.")
        return

    category_map = {
        "üåø –ü—Ä–∏—Ä–æ–¥–∞": "–ø—Ä–∏—Ä–æ–¥–∞",
        "‚öôÔ∏è –ò–Ω–∂–µ–Ω–µ—Ä—ã": "–∏–Ω–∂–µ–Ω–µ—Ä—ã",
        "üèÖ –°–ø–æ—Ä—Ç": "—Å–ø–æ—Ä—Ç",
        "üìÅ –†–∞–∑–Ω–æ–µ": "—Ä–∞–∑–Ω–æ–µ"
    }
    folder_name = category_map[category]

    photos = get_photos_by_category(folder_name)
    if not photos:
        await update.message.reply_text("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.")
        return

    # –û—Ç–ø—Ä–∞–≤–∏–º –ø–µ—Ä–≤—ã–µ 3 —Ñ–æ—Ç–æ
    media_group = []
    for photo_path in photos[:3]:
        media_group.append(InputMediaPhoto(open(photo_path, "rb")))

    await update.message.reply_media_group(media_group)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ (–ø–æ –Ω–æ–º–µ—Ä–∞–º)
    buttons = []
    for i in range(min(len(photos), 3)):
        buttons.append([InlineKeyboardButton(text=f"–§–æ—Ç–æ {i+1}", callback_data=f"vote_{folder_name}_{i}")])

    reply_markup = InlineKeyboardMarkup(buttons)

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –æ—Ü–µ–Ω–∫–∏, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )
