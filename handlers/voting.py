from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, InputMediaPhoto, ReplyKeyboardMarkup, InputMediaPhoto
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler
from utils.db import load_photos, load_users, save_users, save_photos, load_votes, save_votes
import os
import json

CATEGORIES = ['nature', 'engineers', 'sports', 'other']

VOTES_FILE = "data/votes.json"
PHOTOS_FILE = "data/photos.json"

def load_json(path):
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {}

def save_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def register_handlers(app):
    app.add_handler(CommandHandler("vote", choose_category))
    app.add_handler(CallbackQueryHandler(handle_category, pattern="^cat_"))
    app.add_handler(CallbackQueryHandler(handle_vote, pattern="^vote_"))

async def choose_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    voted_categories = context.user_data.get("voted_categories", [])
    keyboard = []
    for c in CATEGORIES:
        if c not in voted_categories:
            keyboard.append([InlineKeyboardButton(c.capitalize(), callback_data=f"cat_{c}")])

    if not keyboard:
        await update.message.reply_text("–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –≤–æ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö!\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.")
        return

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    category = update.callback_query.data.split("_")[1]

    photos = load_photos()

    if category not in photos or not photos[category]:
        await update.callback_query.message.reply_text("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.")
        return

    context.user_data["voting_category"] = category
    context.user_data["photo_ids"] = list(photos[category].keys())

    for photo_id, (path, author) in photos[category].items():
        try:
            with open(path, "rb") as f:
                button = InlineKeyboardMarkup([
                    [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å", callback_data=f"vote_{category}_{photo_id}")]
                ])
                await update.effective_chat.send_photo(f, caption=f"–ê–í–¢–û–†: {author}", reply_markup=button)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞ {path}: {e}")

async def handle_vote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        _, category, photo_id = query.data.split("_")
    except Exception:
        await query.edit_message_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.")
        return

    user_id = str(query.from_user.id)

    photos = load_photos()
    votes = load_votes()

    if category not in photos or photo_id not in photos[category]:
        await query.edit_message_text("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    if category not in votes:
        votes[category] = {}

    if photo_id not in votes[category]:
        votes[category][photo_id] = {"votes": 0, "users": []}

    if user_id in votes[category][photo_id]["users"]:
        await query.edit_message_text("–í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ —ç—Ç–æ —Ñ–æ—Ç–æ.")
        return

    # –ì–æ–ª–æ—Å—É–µ–º
    votes[category][photo_id]["votes"] += 1
    votes[category][photo_id]["users"].append(user_id)
    save_votes(votes)

    # –û—Ç–º–µ—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—É—é
    voted_categories = context.user_data.get("voted_categories", [])
    if category not in voted_categories:
        voted_categories.append(category)
        context.user_data["voted_categories"] = voted_categories

    await query.edit_message_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à –≥–æ–ª–æ—Å —É—á—Ç—ë–Ω.")

    # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    if set(voted_categories) == set(CATEGORIES):
        await query.message.reply_text("–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –≤–æ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö.")
    else:
        keyboard = [
            [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="cat_menu")],
            [InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", callback_data="end_vote")]
        ]
        await query.message.reply_text(
            "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –≤ –¥—Ä—É–≥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def enter_voting(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ú–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—Ä–æ—à—ë–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–ø—á—É
    # if not is_verified(user_id): return

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –æ—Ü–µ–Ω–∫–∏:",
        reply_markup=ReplyKeyboardMarkup(
            [["üåø –ü—Ä–∏—Ä–æ–¥–∞", "‚öôÔ∏è –ò–Ω–∂–µ–Ω–µ—Ä—ã"], ["üèÖ –°–ø–æ—Ä—Ç", "üìÅ –†–∞–∑–Ω–æ–µ"]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—É—Ç–µ–π –∫ —Ñ–æ—Ç–æ –∏–∑ –ø–∞–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def get_photos_by_category(category: str):
    folder = os.path.join("media", category)
    photos = []
    if os.path.exists(folder):
        for file in os.listdir(folder):
            if file.lower().endswith((".jpg", ".jpeg", ".png")):
                photos.append(os.path.join(folder, file))
    return photos

async def handle_category_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    category_map = {
        "üåø –ü—Ä–∏—Ä–æ–¥–∞": "–ø—Ä–∏—Ä–æ–¥–∞",
        "‚öôÔ∏è –ò–Ω–∂–µ–Ω–µ—Ä—ã": "–∏–Ω–∂–µ–Ω–µ—Ä—ã",
        "üèÖ –°–ø–æ—Ä—Ç": "—Å–ø–æ—Ä—Ç",
        "üìÅ –†–∞–∑–Ω–æ–µ": "—Ä–∞–∑–Ω–æ–µ"
    }

    category_text = update.message.text.strip()
    if category_text not in category_map:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    category = category_map[category_text]
    context.user_data["voting_stage"] = 1
    context.user_data["voting_category"] = category
    context.user_data["first_round_choice"] = None
    context.user_data["second_round_choice"] = None

    photos = load_photos()

    if category not in photos:
        await update.message.reply_text("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.")
        return

    context.user_data["all_photos"] = list(photos[category].items())

    await send_photo_block(update, context, block_number=1)

async def send_photo_block(update, context, block_number):
    photos = context.user_data["all_photos"]
    total = len(photos)

    start = (block_number - 1) * 10
    end = min(start + 10, total)

    if start >= total:
        if update.callback_query and update.callback_query.message:
            await update.callback_query.message.reply_text("–ù–µ—Ç –±–æ–ª—å—à–µ —Ñ–æ—Ç–æ.")
        elif update.message:
            await update.message.reply_text("–ù–µ—Ç –±–æ–ª—å—à–µ —Ñ–æ—Ç–æ.")
        return

    media = []
    authors_text_lines = []
    for i in range(start, end):
        photo_path, author = photos[i][1]
        try:
            media.append(InputMediaPhoto(open(photo_path, "rb"), caption=f"–ê–í–¢–û–†: {author}"))
            authors_text_lines.append(f"–§–æ—Ç–æ {i - start + 1}: –ê–≤—Ç–æ—Ä ‚Äî {author}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ {photo_path}: {e}")

    if media:
        if update.callback_query and update.callback_query.message:
            await update.callback_query.message.reply_media_group(media)
            await update.callback_query.message.reply_text("\n".join(authors_text_lines))
        elif update.message:
            await update.message.reply_media_group(media)
            await update.message.reply_text("\n".join(authors_text_lines))
        else:
            print("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞.")

    # –ö–Ω–æ–ø–∫–∏ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π –æ—Ç 1 –¥–æ 10 –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ –∏ callback_data —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º
    buttons = [
        [InlineKeyboardButton(f"–§–æ—Ç–æ {j+1}", callback_data=f"choose_{block_number}_{i}")]
        for j, i in enumerate(range(start, end))
    ]
    markup = InlineKeyboardMarkup(buttons)

    if update.callback_query and update.callback_query.message:
        await update.callback_query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ:", reply_markup=markup)
    elif update.message:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ:", reply_markup=markup)

async def handle_vote_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data  # choose_1_3 (–±–ª–æ–∫ 1, —Ñ–æ—Ç–æ 3)
    _, block_str, index_str = data.split("_")
    block = int(block_str)
    index = int(index_str)

    photos = context.user_data.get("all_photos", [])
    if index >= len(photos):
        await query.edit_message_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
        return

    chosen = photos[index]

    if block == 1:
        context.user_data["first_round_choice"] = chosen
        total_photos = len(photos)
        if total_photos > 10:
            await query.edit_message_text("–°–ø–∞—Å–∏–±–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫–æ –≤—Ç–æ—Ä–æ–º—É –±–ª–æ–∫—É.")
            await send_photo_block(update, context, block_number=2)
        else:
            context.user_data["second_round_choice"] = None
            await send_final_choice(update, context)

    elif block == 2:
        context.user_data["second_round_choice"] = chosen
        await query.edit_message_text("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ª—É—á—à–µ–µ –∏–∑ –¥–≤—É—Ö —Ñ–æ—Ç–æ.")
        await send_final_choice(update, context)

    elif block == 3:
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä
        user_id = query.from_user.id
        category = context.user_data.get("voting_category")

        votes = load_json(VOTES_FILE)  # –ò–ª–∏ load_votes(), –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è
        if category not in votes:
            votes[category] = {}

        photo_id = str(index)
        if photo_id not in votes[category]:
            votes[category][photo_id] = {"votes": 0, "users": []}

        if user_id not in votes[category][photo_id]["users"]:
            votes[category][photo_id]["votes"] += 1
            votes[category][photo_id]["users"].append(user_id)
            save_json(VOTES_FILE, votes)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ user_data
        voted_categories = context.user_data.get("voted_categories", [])
        if category and category not in voted_categories:
            voted_categories.append(category)
            context.user_data["voted_categories"] = voted_categories

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
        if set(voted_categories) == set(CATEGORIES):
            await query.edit_message_text(
                "–°–ø–∞—Å–∏–±–æ! –í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –≤–æ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö.\n"
                "–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."
            )
        else:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å
            keyboard = [
                [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="cat_menu")],
                [InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", callback_data="end_vote")]
            ]
            markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤—ã–±–æ—Ä! –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –≤ –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö?",
                reply_markup=markup
            )

async def send_final_choice(update, context):
    chosen = []
    for key in ["first_round_choice", "second_round_choice"]:
        if context.user_data.get(key):
            chosen.append(context.user_data[key])

    media = []
    for idx, (photo_id, (path, author)) in enumerate(chosen):
        try:
            media.append(InputMediaPhoto(open(path, "rb"), caption=f"–ê–í–¢–û–†: {author}"))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ {path}: {e}")

    if media:
        await update.effective_chat.send_media_group(media)

    buttons = [
        [InlineKeyboardButton(f"–§–æ—Ç–æ {i+1}", callback_data=f"choose_3_{context.user_data['all_photos'].index(chosen[i])}")]
        for i in range(len(chosen))
    ]
    markup = InlineKeyboardMarkup(buttons)

    await update.effective_chat.send_message("–í—ã–±–µ—Ä–∏—Ç–µ –ª—É—á—à–µ–µ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–∞–Ω–µ–µ —Ñ–æ—Ç–æ:", reply_markup=markup)

async def handle_continue_vote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "cat_menu":
        voted_categories = context.user_data.get("voted_categories", [])
        keyboard = []
        for c in CATEGORIES:
            if c not in voted_categories:
                keyboard.append([InlineKeyboardButton(c.capitalize(), callback_data=f"cat_{c}")])

        if not keyboard:
            await query.edit_message_text("–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –≤–æ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö!\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.")
            return

        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == "end_vote":
        await query.edit_message_text("–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞.")
